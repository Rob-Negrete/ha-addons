name: CI

# CI workflow optimized to skip release-please auto-generated branches
# Release-please branches contain only version bumps and don't need full CI
on:
  pull_request:
    branches: [main]
  # Add manual workflow dispatch for testing
  workflow_dispatch:

jobs:
  test:
    name: Test Face Rekon
    runs-on: ubuntu-latest
    # Skip CI for release-please branches
    if: github.head_ref != '' && !startsWith(github.head_ref, 'release-please--') || github.head_ref == ''
    strategy:
      matrix:
        python-version: [3.10.18]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install test dependencies
        run: |
          cd face-rekon
          pip install -r requirements-test.txt

      - name: Run unit tests with coverage
        run: |
          cd face-rekon
          QDRANT_PATH=/tmp/ci_test_qdrant \
          FACE_REKON_BASE_PATH=/tmp/ci_test_faces \
          FACE_REKON_UNKNOWN_PATH=/tmp/ci_test_unknowns \
          FACE_REKON_THUMBNAIL_PATH=/tmp/ci_test_thumbnails \
          FACE_REKON_USE_EMBEDDED_QDRANT=true \
          python -m pytest tests/unit/ -c pytest-unit.ini -v --cov=scripts --cov-report=xml --cov-report=json --cov-report=term-missing

      - name: Pull LFS files before Docker build
        run: |
          cd face-rekon
          git lfs pull

      - name: Build test container
        run: |
          cd face-rekon
          docker build -f Dockerfile.test -t face-rekon-test .

      - name: Run integration tests in container with coverage
        run: |
          cd face-rekon
          # Create a volume to persist coverage data from container
          mkdir -p coverage-data
          # Run integration tests with coverage output
          docker compose -f docker-compose.test.yml run --rm \
            -v "$(pwd)/coverage-data:/app/coverage-data" \
            integration-tests sh -c "
              python -m pytest tests/integration/ \
                --cov=scripts \
                --cov-report=xml:/app/coverage-data/coverage-integration.xml \
                --cov-report=json:/app/coverage-data/coverage-integration.json \
                --cov-append \
                -c pytest-integration.ini -v --tb=short
            "

      - name: Combine coverage reports
        run: |
          cd face-rekon
          # Install coverage tools
          pip install coverage[toml]

          # Combine unit and integration coverage
          if [ -f "coverage-data/coverage-integration.xml" ]; then
            # Create combined coverage report
            cp coverage.xml coverage-unit.xml
            cp coverage-data/coverage-integration.xml .

            # Merge JSON files for more detailed analysis
            if [ -f "coverage-data/coverage-integration.json" ]; then
              cp coverage-data/coverage-integration.json .
              echo "üìä Both unit and integration coverage collected"
            else
              echo "‚ö†Ô∏è  Integration coverage JSON not found, using XML only"
            fi
          else
            echo "‚ö†Ô∏è  Integration coverage not found, using unit tests only"
            cp coverage.xml coverage-combined.xml
          fi

      - name: Upload combined coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: ./face-rekon
          files: ./coverage.xml,./coverage-integration.xml
          fail_ci_if_error: false

      - name: Upload coverage artifacts for health check
        uses: actions/upload-artifact@v4
        with:
          name: ci-coverage-reports
          path: |
            face-rekon/coverage*.xml
            face-rekon/coverage*.json
          retention-days: 7

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest
    # Skip CI for release-please branches
    if: github.head_ref != '' && !startsWith(github.head_ref, 'release-please--') || github.head_ref == ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test Docker build
        uses: docker/build-push-action@v5
        with:
          context: ./face-rekon
          file: ./face-rekon/Dockerfile
          platforms: linux/amd64
          push: false
          tags: face-rekon:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    # Skip CI for release-please branches
    if: github.head_ref != '' && !startsWith(github.head_ref, 'release-please--') || github.head_ref == ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10.18

      - name: Install linting tools
        run: |
          pip install black==23.7.0 flake8==6.0.0 mypy==1.5.1

      - name: Check code formatting with Black
        run: |
          black --check --diff face-rekon/scripts face-rekon/tests

      - name: Lint with flake8
        run: |
          flake8 face-rekon/scripts face-rekon/tests --max-line-length=88 --extend-ignore=E203,W503

      - name: Type check with mypy
        continue-on-error: true # Don't fail CI for type issues initially
        run: |
          mypy face-rekon/scripts --ignore-missing-imports
